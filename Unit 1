# Topic 1.1(1):

* The compiler will ignore any text between the /* and */ characters.

* Java is a class based language which everything takes context in a base of a class(Class Declaration) and class name must match the file name

* main Method controls all of the action in the program

* System.out generates output to console

* System.out.print(); will display whatever is in the () on the screen and the cursor will wait at the end of the line

* Again System.out.println(); will also display whatever is in the () on the screen but the cursor won't wait at the end of the line, it will move to the next line

# Topic 1.1(2):

* A string literal in java is an exact sequence of characters which are closed with two quotation marks. (E.g: (“This is a string literal.”)) but the program doesn’t know what we intend to do, which is a logic error. Also, they should be enclosed with double quotes

# Topic 1.1(3):

* Syntax, Compiler Error: Java is a little more detail oriented than we are in the english language, so if we do something syntactically wrong the program won't let us compile like if we type wrongly or forget a semicolon.

* Logic Error: Logic errors are detected after the has been run and we need to be sure what our code supposed to do to be sure that we don’t have a logic error which means the input doesn’t match with the output

# Topic 1.2(1):

*A type is a set of values(a domain) and a set of operations on them

*Data types can be categorized as either primitive or reference

*Primitive Data: Determines the size and the type of information

*Booleans: They are either True or False(Takes up 1 bit)

*Int: They are whole numbers, we can use it to represent basic value(+, - , *, /)(Takes up 32 bits)

*Double: Decimal Values, they refer floating-point numbers(Takes up 64 bits)

* Txt: They are basically text which we can basically refer as string

* There are also non-primitive data types. As an example, we can string because it’s generally created by the users

# Topic 1.2(2):

* Variables may consist of letters, digits, or an underscore and they are case sensitive

* They cannot start with a digit and spaces are not allowed

* They may not use special characters like &, $ etc. and may not Java reserved words

* Camel Case: This a good way to declare a variable with the first case being small and the second case being capital

* Each variable has associated memory that hold its value

* If a variable is declared as final, its value cannot be changed once its initialized

# Topic 1.3(1):

* A literal is the source code representation of a fixed value

* A literal is a representation of numeric value which we can do arithmetic operations on it

* Modulus is a operation where it gives the remainder of a division problem (17 % 3 = 2 )

* Arithmetic operations are +(addition), -(subtraction), *(multiplication), /(division), %(mod)

* If we are not using double but integer, then the value will be simplified into the closest small number

# Topic 1.3(2):

* Operator can be used to construct compound expressions

*Operator Precedence: While we are working with arithmetic operators, first of all we will look for any parenthesis from left to right, after that we will start from left to right looking for any *, /, % operator and if we see one, we will go from left to right until we finish every single of them, later that we will look for any + , - and again if we see one, we will again go from left to right until we finish every single of them.

* Exception Error: Terminating program due to an exception that occurs while the program is running E.g. An attempt to divide an integer by zero will result in an Arithmetic Exception to occur

# Topic 1.3(3):

* Assignment Operator: Assign the value on the right of the assignment operator to the variable on the left (E.g. x = 7) Also we can only assign from right to left (7 = x is illegal)

* The assignment operator will be the last thing that we should be doing according to the Operator Precedence which means that will assign the value after doing the operations
Operator Precedence on Assignment Operators are from right to left (x = y = 7 > x = 7 )

# Topic 1.4(1):

* There are 5 compound assignment operators which are +=, -=, *=, /=, %= and while working with them we are going to take the value that is currently stored in the variable and then we are going to use the arithmetic operator and assign the result back to x
X will stay as the result of the value after the compound assignment operator

# Topic 1.4(2):

* Increment Operator(++) and Decrement Operator(--)  needs to be attached to a variable, it will take the value currently stored in the variable, it will add 1 or subtract 1 and assign the result back to the variable which will be the latest value of the variable

# Topic 1.4(3):

* While using arithmetic operators, until we get to the print output we are going to apply every single operator from top to bottom (E.g. x = 3, x-=3, x+= 5 >>> x = 5)


# Topic 1.5(1):

* If we are using arithmetic operators inside the parentheses of the print operator then if the result is a decimal number, if we don't use at least one double inside the parentheses, the result will be printed as its rounded up so we need to either use one value as double or we should put (double) before the operation 
E.g. (System.out.print(6.0 / 4); or System.out.print((double) 6 / 4);)

* We can also round a double value by putting (int) before the arithmetic operation or the variable but we should put parentheses on the arithmetic operator (int) (2.5 * 2.0)

# Topic 1.5(2):

* The functions Integer.MAX_VALUE and Integer.MIN_VALUE are used to terminate the function when the assigned values pass its limit which are either integers are doubles but on doubles its upto 14-15 digits

*If the MIN or MAX values passes the limit it will cause an overflow error 
